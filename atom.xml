<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://TakashiNakagawa.github.io/atom.xml" rel="self"/>
  <link href="http://TakashiNakagawa.github.io/"/>
  <updated>2013-05-25T09:09:28+09:00</updated>
  <id>http://TakashiNakagawa.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressのテーマ設定]]></title>
    <link href="http://TakashiNakagawa.github.io/blog/2013/05/25/theme/"/>
    <updated>2013-05-25T08:49:00+09:00</updated>
    <id>http://TakashiNakagawa.github.io/blog/2013/05/25/theme</id>
    <content type="html"><![CDATA[<h1>Octopressのテーマの変更方法</h1>

<p><a href="http://www.evolument.com/blog/2013/03/02/top-10-plus-octopress-themes/">こちらのリンク先</a>から選んで変更するだけ</p>

<p>今適用しているテーマに変更する場合は、</p>

<pre><code>cd octopress
git clone git://github.com/sevenadrian/foxslide.git .themes/foxslide
rake install['foxslide']
rake generate
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering OpenCV 8章]]></title>
    <link href="http://TakashiNakagawa.github.io/blog/2013/05/17/opencv8/"/>
    <updated>2013-05-17T17:25:00+09:00</updated>
    <id>http://TakashiNakagawa.github.io/blog/2013/05/17/opencv8</id>
    <content type="html"><![CDATA[<h2><em>Chapter 8: Face Recognition using Eigenfaces or Fisherfaces</em></h2>

<h3>概要</h3>

<p>Mastering Opencv with Practical Computer Vision Projectsの8章を読んでみた。</p>

<p>アプリを実行して動作の確認をする事が出来たので、改めて内容をまとめて直してみる。</p>

<p>本章の内容は以下の４つのステップに分かれている。
各ステップは丁寧に書かれており、最終的なアプリはEigenfaces or Fisherfacesを<br/>
ソースコード上で切り分けて実行する事が出来るようになっている。</p>

<ul>
<li>Step 1: Face detection</li>
<li>Step 2: Face preprocessing</li>
<li>Step 3: Collecting faces and learning from them</li>
<li>Step 4: Face recognition</li>
</ul>


<h2>Step1: Face detection  </h2>

<ul>
<li>Haar-based face detector</li>
<li>LBP-based face detector</li>
</ul>


<h5>Implementing face detection using OpenCV</h5>

<h5>Loading a Haar or LBP detector for object or face detection</h5>

<pre><code>CascadeClassifier faceDetector:
try{
  faceDetector.load(fileCascadeFilenname);
} catch (cv::Exception e){}
if (faceDetector.empty()){
  cerr &lt;&lt; "Error &lt;&lt; endl;
  exit(1);
}
</code></pre>

<h5>Detecting an object using the Haar or LBP Classifier</h5>

<ol>
<li>Grayscale color conversion</li>
<li>Shringking the camera image</li>
<li>Histogram equalization</li>
</ol>


<h5>Detecting the face</h5>

<ul>
<li>CascadeClassifier::detectMultiScale()</li>
</ul>


<h2>Step2: Face preprocessing</h2>

<p>顔認識は、明るさ、顔の向き、顔の表情などに影響を受けやすい。<br/>
histogram equalizationだけで十分な場合もあるが、それでは不十分な場合も多い。</p>

<h5>Eye detection</h5>

<p>false positive : 検出すべきでないものも検出してしまうこと<br/>
false negative : 検出すべきものを検出しないこと</p>

<p>目を検出することにより、false positiveを避ける事が出来る</p>

<p>目を検出するもの</p>

<ul>
<li>haarcascade_mcs_lefteye.xml( or righteye)</li>
<li>haarcascade_lefteye_2splits.xml( or righteye)</li>
</ul>


<p>開いている目のみを検出するもの</p>

<ul>
<li>haarcascade_eye.xml</li>
<li>haarcascade_eye_tree_eyeglasses.xml</li>
</ul>


<h5>Eye search regions</h5>

<p>顔と目の検出が成功したら、以下の４つを実行</p>

<ul>
<li><p>Geometrical transformation and cropping</p>

<ul>
<li>Rotate the face so that the tow eyes are horizontal</li>
<li>Scale the face so that the distance between the tow eyes is always the same</li>
<li>Translate the face so that the eyes are always centered horizontally and at a desired height</li>
<li>Crop the outer parts of the face, since we want to crop away the image background, hair, forehead, ears, and chin</li>
</ul>
</li>
<li><p>Separate histogram equalization for left and right sides</p></li>
<li>Smoothing

<ul>
<li>Bilateral Filter

<ul>
<li>エッジ保持平滑化フィルタ、画像をスムーズにしつつもエッジ部分はぼかす事のない効果を持っている</li>
<li>ガウスぼかしをする際に、画素間の距離で重みを決めるのではなく、輝度の差も見て、変化が大きいところは重みを小さくすることによってエッジを残す</li>
</ul>
</li>
</ul>
</li>
<li>Elliptical mask</li>
</ul>


<h2>Step3: Collecting faces and learing from them</h2>

<h5>Collecting preprocessed faces for training</h5>

<p>集めた2つの画像の一致を調べるには次のようにする。</p>

<pre><code>double getSimilarity(const Mat A, const Mat B){
  double errorL2 = norm(A, B, CV_L2);
  double similarity = errorL2 / (double)(A.rows * A.cols);
  return similarity;
}
</code></pre>

<p>getSimilarityの値が0.3以上あれば画像が動いたと判断出来る</p>

<h5>Traing the face recognition system from collected faces</h5>

<p>顔認識を行うために、適切な機会学習アルゴリズムを用いる必要がある。</p>

<ul>
<li>Eigenfaces( Principal Component Analysis(PCA) )</li>
<li>Fisherfaces( Linear Discriminant Analysis(LDA) )</li>
<li>Other classic face recognition algorithms( <a href="http://www.face-rec.org/algorithms/">http://www.face-rec.org/algorithms/</a> )</li>
<li>Newer face recognition algorithms ( CVPR, ICCVなど )</li>
</ul>


<h5>Viewing the learned knowledge</h5>

<p>EigenfacesとFisherfacesの内部データ構造は同じ。<br/>
両者は一次元の固有ベクトルに基づいている。</p>

<h5>Average face</h5>

<h5>Eigenvalues, Eigenfaces, and Fisherfaces</h5>

<p>Eigenfacesの場合、3人×4つの顔：固有値は3×４＝12<br/>
Fisherfacesの場合、3人×4つの顔: 固有値は2つ ← なぜ3つではない？？</p>

<h2>Step4: Face recognition</h2>

<h5>Face identification: Recognizing people from their face</h5>

<h5>Face verificatoin: Validating that it is the claimed person</h5>

<p>to obtain good recognition accuracy, you will need to ensure
that the training set of each person covers the hull range of lighting conditions,
facial expressions, and angles that you expect to test with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今日からOctopress]]></title>
    <link href="http://TakashiNakagawa.github.io/blog/2013/05/17/hello/"/>
    <updated>2013-05-17T10:03:00+09:00</updated>
    <id>http://TakashiNakagawa.github.io/blog/2013/05/17/hello</id>
    <content type="html"><![CDATA[<h1>Octopressを使いはじめる</h1>

<p>以前もちょっとやっていたことがあったけども途中で止めてしまった。<br/>
また再開することに。<br/>
ここには技術的な事を書いて行きたいと思う。</p>

<p>何はともあれOctopressに投稿するための作業をメモしておく</p>

<pre><code>$ rake new_post["test"] # 新規記事を作成  
$ rake preview # preview, localhost:4000にアクセス  
$ rake generate # convert to html  
$ rake deploy # publish  
</code></pre>

<p>次回はOctopressのレイアウトを変更の仕方について調べたい</p>
]]></content>
  </entry>
  
</feed>
